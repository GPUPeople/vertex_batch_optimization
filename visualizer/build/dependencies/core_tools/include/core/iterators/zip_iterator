


#ifndef INCLUDED_CORE_ITERATORS_ZIP_ITERATOR
#define INCLUDED_CORE_ITERATORS_ZIP_ITERATOR

#pragma once

#include <type_traits>
#include <utility>
#include <tuple>
#include <iterator>


namespace core
{
	namespace iterators
	{
		template <typename... Iterators>
		class zip_iterator
		{
			std::tuple<Iterators...> its;

		public:
			using difference_type = typename std::tuple_element_t<0, decltype(its)>::difference_type;
			using value_type = decltype(std::make_tuple(*std::declval<Iterators>()...));
			using pointer = value_type*;
			using reference = value_type&;
			using iterator_category = std::common_type_t<typename std::iterator_traits<Iterators>::iterator_category...>;

			zip_iterator(Iterators... its) noexcept(noexcept(std::tuple<Iterators...>(its...)))
				: its(its...)
			{
			}

			auto operator *() const noexcept(noexcept(std::tie(*std::declval<const Iterators>()...))) { return std::apply([](auto&&... it) { return std::tie(*it...); }, its); }
			auto operator *() noexcept(noexcept(std::tie(*std::declval<Iterators>()...))) { return std::apply([](auto&&... it) { return std::tie(*it...); }, its); }

			auto operator [](difference_type i) const noexcept(noexcept(std::tie(*std::declval<const Iterators>()...))) { return std::apply([i](auto&&... it) { return std::tie(*it[i]...); }, its); }
			auto operator [](difference_type i) noexcept(noexcept(std::tie(*std::declval<Iterators>()...))) { return std::apply([i](auto&&... it) { return std::tie(*it[i]...); }, its); }

			friend zip_iterator& operator ++(zip_iterator& me) noexcept(noexcept((void(++std::declval<Iterators>()), ...)))
			{
				std::apply([](auto&&... it) { (void(++it), ...); }, me.its);
				return me;
			}

			friend zip_iterator operator ++(zip_iterator me, int) noexcept(noexcept(++me))
			{
				return ++me;
			}

			friend zip_iterator& operator +=(zip_iterator& me, difference_type n) noexcept(noexcept((void(std::declval<Iterators>() += n), ...)))
			{
				std::apply([n](auto&&... it) { (void(it += n), ...); }, me.its);
				return me;
			}

			friend zip_iterator& operator --(zip_iterator& me) noexcept(noexcept((void(--std::declval<Iterators>()), ...)))
			{
				std::apply([](auto&&... it) { (void(--it), ...); }, me.its);
				return me;
			}

			friend zip_iterator operator --(zip_iterator me, int) noexcept(noexcept(--me))
			{
				return --me;
			}

			friend zip_iterator& operator -=(zip_iterator& me, difference_type n) noexcept(noexcept((void(std::declval<Iterators>() -= n), ...)))
			{
				std::apply([n](auto&&... it) { (void(it -= n), ...); }, me.its);
				return me;
			}

			friend zip_iterator operator +(zip_iterator a, difference_type n) noexcept(noexcept((void(std::declval<Iterators>() = std::declval<Iterators>() + n), ...)))
			{
				std::apply([n](auto&&... it) { (void(it = it + n), ...); }, a.its);
				return a;
			}

			friend zip_iterator operator +(difference_type n, zip_iterator a) noexcept(noexcept((void(std::declval<Iterators>() = n + std::declval<Iterators>()), ...)))
			{
				std::apply([n](auto&&... it) { (void(it = n + it), ...); }, a.its);
				return a;
			}

			friend zip_iterator operator -(zip_iterator a, difference_type n) noexcept(noexcept((void(std::declval<Iterators>() = std::declval<Iterators>() - n), ...)))
			{
				std::apply([n](auto&&... it) { (void(it = it - n), ...); }, a.its);
				return a;
			}

			friend auto operator -(const zip_iterator& a, const zip_iterator& b) noexcept(noexcept(std::get<0>(a.its) - std::get<0>(b.its)))
			{
				return std::get<0>(a.its) - std::get<0>(b.its);
			}

			template <typename Iterator>
			friend auto operator -(const zip_iterator& a, const Iterator& b) noexcept(noexcept(std::get<Iterator>(a.its) - b))
			{
				return std::get<Iterator>(a.its) - b;
			}

			template <typename Iterator>
			friend auto operator -(const Iterator& a, const zip_iterator& b) noexcept(noexcept(b - std::get<Iterator>(a.its)))
			{
				return b - std::get<Iterator>(a.its);
			}

			friend bool operator ==(const zip_iterator& a, const zip_iterator& b) noexcept(noexcept(std::get<0>(a.its) == std::get<0>(b.its)))
			{
				return std::get<0>(a.its) == std::get<0>(b.its);
			}

			template <typename Iterator>
			friend bool operator ==(const zip_iterator& a, const Iterator& b) noexcept(noexcept(std::get<Iterator>(a.its) == b))
			{
				return std::get<Iterator>(a.its) == b;
			}

			template <typename Iterator>
			friend bool operator ==(const Iterator& a, const zip_iterator& b) noexcept(noexcept(a == std::get<Iterator>(b.its)))
			{
				return a == std::get<Iterator>(b.its);
			}

			friend bool operator !=(const zip_iterator& a, const zip_iterator& b) noexcept(noexcept(std::get<0>(a.its) != std::get<0>(b.its)))
			{
				return std::get<0>(a.its) != std::get<0>(b.its);
			}

			template <typename Iterator>
			friend bool operator !=(const zip_iterator& a, const Iterator& b) noexcept(noexcept(std::get<Iterator>(a.its) != b))
			{
				return std::get<Iterator>(a.its) != b;
			}

			template <typename Iterator>
			friend bool operator !=(const Iterator& a, const zip_iterator& b) noexcept(noexcept(a != std::get<Iterator>(b.its)))
			{
				return a != std::get<Iterator>(b.its);
			}

			friend bool operator <(const zip_iterator& a, const zip_iterator& b) noexcept(noexcept(std::get<0>(a.its) < std::get<0>(b.its)))
			{
				return std::get<0>(a.its) < std::get<0>(b.its);
			}

			template <typename Iterator>
			friend bool operator <(const zip_iterator& a, const Iterator& b) noexcept(noexcept(std::get<Iterator>(a.its) < b))
			{
				return std::get<Iterator>(a.its) < b;
			}

			template <typename Iterator>
			friend bool operator <(const Iterator& a, const zip_iterator& b) noexcept(noexcept(a < std::get<Iterator>(b.its)))
			{
				return a < std::get<Iterator>(b.its);
			}

			friend bool operator <=(const zip_iterator& a, const zip_iterator& b) noexcept(noexcept(std::get<0>(a.its) <= std::get<0>(b.its)))
			{
				return std::get<0>(a.its) <= std::get<0>(b.its);
			}

			template <typename Iterator>
			friend bool operator <=(const zip_iterator& a, const Iterator& b) noexcept(noexcept(std::get<Iterator>(a.its) <= b))
			{
				return std::get<Iterator>(a.its) <= b;
			}

			template <typename Iterator>
			friend bool operator <=(const Iterator& a, const zip_iterator& b) noexcept(noexcept(a <= std::get<Iterator>(b.its)))
			{
				return a <= std::get<Iterator>(b.its);
			}

			friend bool operator >(const zip_iterator& a, const zip_iterator& b) noexcept(noexcept(std::get<0>(a.its) > std::get<0>(b.its)))
			{
				return std::get<0>(a.its) > std::get<0>(b.its);
			}

			template <typename Iterator>
			friend bool operator >(const zip_iterator& a, const Iterator& b) noexcept(noexcept(std::get<Iterator>(a.its) > b))
			{
				return std::get<Iterator>(a.its) > b;
			}

			template <typename Iterator>
			friend bool operator >(const Iterator& a, const zip_iterator& b) noexcept(noexcept(a > std::get<Iterator>(b.its)))
			{
				return a > std::get<Iterator>(b.its);
			}

			friend bool operator >=(const zip_iterator& a, const zip_iterator& b) noexcept(noexcept(std::get<0>(a.its) >= std::get<0>(b.its)))
			{
				return std::get<0>(a.its) >= std::get<0>(b.its);
			}

			template <typename Iterator>
			friend bool operator >=(const zip_iterator& a, const Iterator& b) noexcept(noexcept(std::get<Iterator>(a.its) >= b))
			{
				return std::get<Iterator>(a.its) >= b;
			}

			template <typename Iterator>
			friend bool operator >=(const Iterator& a, const zip_iterator& b) noexcept(noexcept(a >= std::get<Iterator>(b.its)))
			{
				return a >= std::get<Iterator>(b.its);
			}
		};
	}
}

#endif  // INCLUDED_CORE_ITERATORS_ZIP_ITERATOR
